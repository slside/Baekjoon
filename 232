import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {	
	static int[][] arr;
	static boolean flag;
	static int N;
//	static Queue<Integer> qx;
//	static Queue<Integer> qy;
	static int move; // 움직이는 횟수
	
	public static void main(String[] args) throws IOException {		
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		arr = new int[N][N];
		int level = 2; // 현재 레벨
		move = 0;
		
		for(int i =0;i<N;i++) {
			for(int j=0;j<N;j++) {
				arr[i][j] = sc.nextInt();				
			}
		} 
		// 입력완료
		int cnt=0;
		while(true) {
			boolean flag = false;
			move(level);
			System.out.println(cnt);
			if(!flag) {
				break;
			}
			cnt ++;
			if(cnt== level) {
				level++;
				cnt=0;
			}

		}
		System.out.println(move);



	}
	public static void move(int level) {
		int[] dx = {-1,0,0,1};
		int[] dy = {0,-1,1,0};
		int sx =0;
		int sy=0;
	Queue<Integer> qx = new LinkedList<Integer>();
	Queue<Integer> qy = new LinkedList<Integer>();
		for(int i =0;i<N;i++) {
			for(int j=0;j<N;j++) {					
				if(arr[i][j] == 9) {
					qx.add(i);
					qy.add(j);
					sx = i;
					sy = j;
					arr[i][j] = 0;
				}
			}
		} 		
		a :while(true) {
			int x = qx.poll();
			int y = qy.poll();
			System.out.println(x+" "+y+" "+move);
			for(int in=0;in<3;in++) {
				if(x+dx[in]>=0 && x+dx[in]<N && y+dy[in]>=0 && y+dy[in]<N) {
					if(arr[x+dx[in]][y+dy[in]] ==0 || arr[x+dx[in]][y+dy[in]]==level) {
						qx.add(x+dx[in]);
						qy.add(y+dy[in]);
					}
					else if(arr[x+dx[in]][y+dy[in]]	>0 && arr[x+dx[in]][y+dy[in]]<level) {
						x = x+dx[in];
						y = y+dy[in];						
						move+= Math.abs(sx-x)+Math.abs(sy-y);
						arr[x][y] = 9;
						qx.clear();
						qy.clear();
						flag = true;
						break a;
					}					
				}
				
			}
			if(qx.size()==0 || qx.size()>N*N) {
				break;
			}
			
		}

	}
	

}
